run1 <- lavaan::sem(mod1, data=d_SH, se = "bootstrap", bootstrap = 50)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
merit.plaintiff ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C'
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_WH, se = "bootstrap", bootstrap = 50)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_SH_f)
out.fit <- lm(merit.defendant1 ~ cond.woman.num + meta.beliefs, data = d_SH_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000)
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000)
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
### Whistleblowing condition
#### Personal beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(personal.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.defendant1 ~ cond.woman.num + personal.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "personal.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Personal beliefs")
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.defendant1 ~ cond.woman.num + meta.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
## Merit Item 2 (Plaintiff)
### Sexual harassment condition
#### Personal beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(personal.beliefs ~ cond.woman.num, data = d_SH_f)
out.fit <- lm(merit.plaintiff2 ~ cond.woman.num + personal.beliefs, data = d_SH_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "personal.beliefs", boot = T, sims = 5000) #make sure set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) #make sure set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Personal beliefs")
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_SH_f)
out.fit <- lm(merit.plaintiff2 ~ cond.woman.num + meta.beliefs, data = d_SH_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000)
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000)
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
### Whistleblowing condition
#### Personal beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(personal.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.plaintiff2 ~ cond.woman.num + personal.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "personal.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Personal beliefs")
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.plaintiff2 ~ cond.woman.num + meta.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
## Merit Item 2 (defendant)
### Sexual harassment condition
#### Personal beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(personal.beliefs ~ cond.woman.num, data = d_SH_f)
out.fit <- lm(merit.defendant2 ~ cond.woman.num + personal.beliefs, data = d_SH_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "personal.beliefs", boot = T, sims = 5000) #make sure set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) #make sure set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Personal beliefs")
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_SH_f)
out.fit <- lm(merit.defendant2 ~ cond.woman.num + meta.beliefs, data = d_SH_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000)
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000)
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
### Whistleblowing condition
#### Personal beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(personal.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.defendant2 ~ cond.woman.num + personal.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "personal.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Personal beliefs")
#### Meta beliefs
# Mediation Analysis
set.seed(123)
med.fit <- lm(meta.beliefs ~ cond.woman.num, data = d_W_f)
out.fit <- lm(merit.defendant2 ~ cond.woman.num + meta.beliefs, data = d_W_f)
med.out <- mediate(med.fit, out.fit, treat = "cond.woman.num", mediator = "meta.beliefs", boot = T, sims = 5000) # set to 5000
summary(med.out)
# Sensitivity Analysis
set.seed(123)
sens.out <- medsens(med.out, rho.by = 0.1, effect.type = "both", sims = 5000) # set to 5000
summary(sens.out)
#plot(sens.out, sens.par = "rho", main = "Meta beliefs")
# for sexual harassment condition: We would predict that this model works.
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
represent.plaintiff ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C' # run each line one by one
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_SH, se = "bootstrap", bootstrap = 50) # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1) # this is gross but I will mnake prettier later..
# for whistleblowing condition: We would predict that this model does NOT work
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
represent.plaintiff ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C'
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_WH, se = "bootstrap", bootstrap = 50) # make sure 5000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
represent.defendant ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C' #run each line one by one
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_SH, se = "bootstrap", bootstrap = 5000)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
represent.defendant ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C' #run each line one by one
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_WH, se = "bootstrap", bootstrap = 50)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1) # this looks gross, but should be correct
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
compensation ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C'
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_SH, se = "bootstrap", bootstrap = 50)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
mod1 <- 'personal.beliefs ~ A*cond.woman
meta.beliefs ~ D*cond.woman
compensation ~ B*personal.beliefs + C*cond.woman +E*meta.beliefs
indirect := (A*B) + (D*E)
direct := C
total := (A*B) + (D*E) + C'
set.seed(123)
run1 <- lavaan::sem(mod1, data=d_WH, se = "bootstrap", bootstrap = 50)  # this takes a while to run, make sure it's set to 5,000
summary(run1,rsquare=TRUE, fit.measures = TRUE, standardized=TRUE)
semPaths(run1, "model", "est", edge.color="Black", layout="tree2", label.cex=1.5, edge.label.cex=1)
library(tidyverse)
library(tsibble)
library(latex2exp)
library(feasts)
library(patchwork)
library(forecast)
library(tseries)
library(knitr)
library(fable)
library(distributional)
#install.packages("kableExtra")
library(kableExtra)
theme_set(theme_bw())
# theme_set(theme_minimal())
knitr::opts_chunk$set(dpi=1000)
library(tidyverse)
library(tsibble)
library(latex2exp)
library(feasts)
library(patchwork)
library(forecast)
library(tseries)
library(knitr)
library(fable)
library(distributional)
#install.packages("kableExtra")
library(kableExtra)
theme_set(theme_bw())
# theme_set(theme_minimal())
knitr::opts_chunk$set(dpi=1000)
# import data
co2_tsib <- as_tsibble(co2)
# monthly time series with the line of best fit
co2_trend_plot <- co2_tsib %>%
ggplot(aes(x = index, y = value)) +
geom_line(color = 'black', size = .5) +
#geom_smooth(method = "lm", formula = "y ~ x",se = F, color = 'steelblue', size = .8) +
labs(title = 'Increasing CO2 concentration from 1959 to 1997',x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years")
# average_yearly_increase
co2_tsib_yearly_change <- co2_tsib %>% as_tibble() %>%
mutate(year = year(index)) %>%
group_by(year) %>%
summarise(`yearly_co2` = mean(value)) %>%
ungroup() %>%
mutate(lag_co2 = lag(yearly_co2),
change = yearly_co2 - lag_co2,
percent_change = ((yearly_co2 - lag_co2)/lag_co2)*100)
# getting average increase (i.e. size of the trend)
yearly_mean <- mean(co2_tsib_yearly_change$change, na.rm = T) # average 1.26 units of co2 change each year
yearly_sd <- sd(co2_tsib_yearly_change$change, na.rm = T) # with a sd of .51 units of co2
change_hist <- ggplot(co2_tsib_yearly_change, aes(x = change)) +
geom_histogram(color = 'gray20', fill = 'gray', binwidth = .25) +
scale_x_continuous(breaks = seq(floor(min(co2_tsib_yearly_change$change, na.rm =T)),
ceiling(max(co2_tsib_yearly_change$change, na.rm =T)), by = 0.25)) +
labs(
title = "Histogram of Yearly Changes in CO2 ppmv",
x = "Change",
y = "Frequency"
)
co2_trend_plot / change_hist
# inspecting acf and graph of co2 concentrations over time
co2_acf <- acf(co2_tsib$value, plot = F)
co2_acf_plot <-  autoplot(co2_acf) +
labs(title = "ACF plot of monthly CO2 Concentrations", x = 'lag', y = 'Autocorrelation')
monthly_co2_ave_plot <- co2_tsib %>% as_tibble() %>%
mutate(month = month(index)) %>%
group_by(month) %>%
summarise(co2_monthly_ave = mean(value, na.rm = T)) %>%
mutate(month_str = factor(month.abb[month], levels = month.abb)) %>%
ungroup() %>%
ggplot(aes(x = month_str, y = co2_monthly_ave, group = 1)) +
geom_line(size = .8, color = 'purple4') +
geom_point(size = 1.5) +
ggtitle("Average CO2 Concentrations Across\nEach Month") +
xlab('Month') +
ylab('Co2 Concentrations (ppmv)') +
theme(axis.text.x = element_text(angle = 45))
co2_acf_plot | monthly_co2_ave_plot
# checking for stationarity
# adf.test(co2_tsib$value)
# making a plot to show how the relationship looks like with yearly averages over the seasons
yearly_ave_w_residuals <- co2_tsib %>% as_tibble() %>%
mutate(year = year(index)) %>%
group_by(year) %>%
mutate(`Yearly Co2` = mean(value)) %>%
mutate(residual = value - `Yearly Co2`) %>%
pivot_longer(cols = c(value, `Yearly Co2`, residual), names_to = "type", values_to = "Monthly Co2") %>%
mutate(residual_bool = if_else(type == "residual", "Residuals", "Monthly Time Series Plotted on Yearly Average Co2"))
yearly_ave_w_residuals_plot <- yearly_ave_w_residuals %>%
ggplot(aes(x = index, y = `Monthly Co2`, color = type)) +
geom_line() +
facet_wrap(~residual_bool, scales = "free_y", ncol = 1) +
xlab('Date') +
theme(legend.position = "none")
yearly_ave_w_residuals_plot
# Fit linear, quadratic, and cubic (3rd-degree polynomial) models at once
co2_models <- co2_tsib %>%
model(
linear_model = TSLM(value ~ index),           # Linear time trend model
quad_model = TSLM(value ~ poly(index, 2)),    # Quadratic time trend model
poly_model = TSLM(value ~ poly(index, 3))     # Cubic polynomial time trend model
)
# Extract fitted values and residuals for all models
fitted_values <- co2_models %>% fitted()  # Fitted values for each model
residuals_values <- co2_models %>% residuals()  # Residuals for each model
# Add fitted values and residuals back to the tsibble
residuals_tslm <- residuals_values %>%
pivot_wider(names_from = .model, values_from = .resid) %>%
rename(
linear_model_resid = linear_model,
quad_model_resid = quad_model,
poly_model_resid = poly_model
)
fitted_tslm <- fitted_values %>%
pivot_wider(names_from = .model, values_from = .fitted) %>%
rename(
linear_model_fitted = linear_model,
quad_model_fitted = quad_model,
poly_model_fitted = poly_model
)
co2_tsib <- co2_tsib %>%
left_join(residuals_tslm, by = "index") %>%
left_join(fitted_tslm, by = "index")
# Plot time series with linear model line
lm_plot <- ggplot(co2_tsib, aes(x = index)) +
geom_line(aes(y = value), color = 'black', size = .5) +  # Original time series
geom_line(aes(y = linear_model_fitted), color = 'blue', size = .8) +  # Linear model predictions
labs(title = 'CO2 Time Series with Linear Trend', x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Plot residuals with horizontal line at 0
lm_residuals_plot <- ggplot(co2_tsib, aes(x = index, y = linear_model_resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0
labs(title = "Residuals of Linear Time Trend Model", x = "Year", y = "Residuals") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Display the plots
lm_plot / lm_residuals_plot
# Plot time series with quadratic model predictions
quad_plot <- ggplot(co2_tsib, aes(x = index)) +
geom_line(aes(y = value), color = 'black', size = .5) +  # Original time series
geom_line(aes(y = quad_model_fitted), color = 'blue', size = .8) +  # Quadratic model predictions
labs(title = 'CO2 Time Series with Quadratic Trend', x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Plot residuals with horizontal line at 0
quad_residuals_plot <- ggplot(co2_tsib, aes(x = index, y = quad_model_resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0
labs(title = "Residuals of Quadratic Time Trend Model", x = "Year", y = "Residuals") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Display the plots
quad_plot / quad_residuals_plot
# Plot time series with linear model line
poly_plot <- ggplot(co2_tsib, aes(x = index)) +
geom_line(aes(y=value), color = 'black', size = .5) +  # Original time series
geom_line(aes(y=poly_model_fitted), color = 'blue', size = .8) +  # Poly model predictions
labs(title = 'CO2 Time Series with Polynomial (3) Trend', x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Plot residuals
poly_residuals_plot <- ggplot(co2_tsib, aes(x = index, y = poly_model_resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0
labs(title = "Residuals of Polynomial (3) Time Trend Model", x = "Year", y = "Residuals")
poly_plot/
poly_residuals_plot
# Log transformation
co2_tsib$log_value <- log(co2_tsib$value)
# Plot log-transformed data
log_data_plot <- ggplot(co2_tsib, aes(x = index, y = log_value)) +
geom_line() +
labs(title = "Log-transformed Co2 Concentrations", x = "Year", y = "Log of Co2 concentrations")
log_data_plot
# Create seasonal dummy variables
co2_tsib$month <- factor(month(co2_tsib$index))
co2_tsib$year <- factor(year(co2_tsib$index))
# Define a function to convert months into seasons
co2_tsib$season <- case_when(
month(co2_tsib$index) %in% c(12, 1, 2) ~ "Winter",
month(co2_tsib$index) %in% c(3, 4, 5) ~ "Spring",
month(co2_tsib$index) %in% c(6, 7, 8) ~ "Summer",
month(co2_tsib$index) %in% c(9, 10, 11) ~ "Autumn"
)
# Convert season into a factor
co2_tsib$season <- factor(co2_tsib$season, levels = c("Winter", "Spring", "Summer", "Autumn"))
# Fit poly (3) models with month variable and season variable
co2_models_x <- co2_tsib %>%
model(
poly_month_model = TSLM(value ~ poly(index, 3, raw = TRUE) + month),  # Polynomial (3rd degree) with month as factor
poly_season_model = TSLM(value ~ poly(index, 3, raw = TRUE) + season) # Polynomial (3rd degree) with season as factor
)
# Extract fitted values and residuals for all models
fitted_values_x <- co2_models_x %>% fitted()  # Fitted values for each model
residuals_values_x <- co2_models_x %>% residuals()  # Residuals for each model
# Add fitted values and residuals back to the tsibble
residuals_tslm_x <- residuals_values_x %>%
pivot_wider(names_from = .model, values_from = .resid) %>%
rename(
poly_month_model_resid = poly_month_model,
poly_season_model_resid = poly_season_model
)
fitted_tslm_x <- fitted_values_x %>%
pivot_wider(names_from = .model, values_from = .fitted) %>%
rename(
poly_month_model_fitted = poly_month_model,
poly_season_model_fitted = poly_season_model
)
co2_tsib <- co2_tsib %>%
left_join(residuals_tslm_x, by = "index") %>%
left_join(fitted_tslm_x, by = "index")
# Plot time series with poly (3) and month variable
poly_month_plot <- ggplot(co2_tsib, aes(x = index)) +
geom_line(aes(y=value), color = 'black', size = .5) +  # Original time series
geom_line(aes(y=poly_month_model_fitted), color = 'blue', size = .8) +  # Poly model predictions
labs(title = 'CO2 Time Series with Polynomial (3) and Month Variable', x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Plot residuals for poly (3) and month variable model
poly_month_residuals_plot <- ggplot(co2_tsib, aes(x = index, y = poly_month_model_resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0
labs(title = "Residuals of Polynomial (3) and Month Variable Model", x = "Year", y = "Residuals")
# Plot time series with poly (3) and season variable
poly_season_plot <- ggplot(co2_tsib, aes(x = index)) +
geom_line(aes(y=value), color = 'black', size = .5) +  # Original time series
geom_line(aes(y=poly_season_model_fitted), color = 'blue', size = .8) +  # Poly model predictions
labs(title = 'CO2 Time Series with Polynomial (3) and Season Variable', x = 'Year', y = 'CO2 concentrations (ppmv)') +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
# Plot residuals for poly (3) and season variable model
poly_season_residuals_plot <- ggplot(co2_tsib, aes(x = index, y = poly_season_model_resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +  # Horizontal line at 0
labs(title = "Residuals of Polynomial (3) and Season Variable Model", x = "Year", y = "Residuals")
poly_month_plot | poly_month_residuals_plot
poly_season_plot | poly_season_residuals_plot
# Generate future monthly dates starting from January 1998 to December 2020
future_index <- seq(from = as.Date("1998-01-01"),  # Start in January 1998
to = as.Date("2020-12-01"), by = "1 month")  # Generate monthly dates up to Dec 2020
# Convert future_index to yearmonth format
future_index <- yearmonth(future_index)
# Create future data with month and season columns
future_data <- tibble(
index = future_index,  # Future index (dates)
month = factor(month(index)),
year = factor(year(index)))
# Define a function to convert months into seasons
future_data$season <- case_when(
month(future_data$index) %in% c(12, 1, 2) ~ "Winter",
month(future_data$index) %in% c(3, 4, 5) ~ "Spring",
month(future_data$index) %in% c(6, 7, 8) ~ "Summer",
month(future_data$index) %in% c(9, 10, 11) ~ "Autumn"
)
# Convert season into a factor
future_data$season <- factor(future_data$season, levels = c("Winter", "Spring", "Summer", "Autumn"))
future_data<- future_data %>%
as_tsibble(index = index)
forecast_poly_season <- co2_models_x %>%
select(poly_season_model) %>%
forecast(new_data = future_data)  # Use a forecast horizon from the last observed point
autoplot(co2_tsib, value) +  # Plot original data  # Plot original data
#geom_line(aes(x = index, y = poly_season_model_fitted), color = "blue", size = 1) +  # Add fitted values
autolayer(forecast_poly_season, color = "cornflowerblue") +  # Add forecasted values
labs(title = "CO2 Levels: Observed (1958-1997) and Forecasted (1998-2020)",
x = "Year", y = "CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y") +
guides(colour = guide_legend(title = "Series"))
# Apply both first-order and seasonal (12th-order) differencing
co2_tsib <- co2_tsib %>%
mutate(diff_value = difference(difference(value, lag = 12),lag=1)) # First-order and seasonal differencing
# Remove leading NAs caused by differencing
co2_tsib <- co2_tsib %>% filter(!is.na(diff_value))
# Plot the differenced series to check if it looks stationary
diff_plot <- ggplot(co2_tsib, aes(x = index, y = diff_value)) +
geom_line() +
labs(title = "Differenced CO2 Concentrations", x = "Year", y = "Differenced CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y")
diff_plot
# post-check for stationarity
# remove NA for adf test
# adf.test(na.omit(co2_tsib$diff_value))
acf_diff <- ACF(co2_tsib, diff_value, lag_max = 24) %>%
autoplot() +
labs(
title = "ACF for Differenced CO2 Concentration",
x = "Year",
y = "Differenced CO2 Concentrations (ppmv)"
)
pacf_diff <- PACF(co2_tsib, diff_value, lag_max = 24) %>%
autoplot() +
labs(
title = "PACF for Differenced CO2 Concentration",
x = "Year",
y = "Differenced CO2 Concentrations (ppmv)"
)
acf_diff | pacf_diff
# Fit ARIMA model by testing different lags using the BIC criterion
model.bic <- co2_tsib %>%
model(
auto = ARIMA(value, stepwise = FALSE, approx = FALSE, ic = "bic")
)
