theme(legend.position = "none")
new_yearly_ave_w_residuals_plot
# Generate future monthly dates starting from January 1998 to September 2024
future_index <- seq(from = as.Date("1998-01-01"),  # Start in January 1998
to = as.Date("2024-09-30"), by = "1 month")  # Generate monthly dates up to Sep 2024
# Convert future_index to yearmonth format
future_index <- yearmonth(future_index)
# Create future data with month and season columns
future_data <- tibble(
index = future_index,  # Future index (dates)
month = factor(month(index)),
year = factor(year(index)))
# Define a function to convert months into seasons
future_data$season <- case_when(
month(future_data$index) %in% c(12, 1, 2) ~ "Winter",
month(future_data$index) %in% c(3, 4, 5) ~ "Spring",
month(future_data$index) %in% c(6, 7, 8) ~ "Summer",
month(future_data$index) %in% c(9, 10, 11) ~ "Autumn"
)
# Convert season into a factor
future_data$season <- factor(future_data$season, levels = c("Winter", "Spring", "Summer", "Autumn"))
future_data<- future_data %>%
as_tsibble(index = index)
forecast_poly_season <- co2_models_x %>%
dplyr::select(poly_season_model) %>%
forecast(new_data = future_data)  # Use a forecast horizon from the last observed point
autoplot(new_co2_tsib, value) +  # Plot original data  # Plot original data
autolayer(forecast_poly_season, color = "blue2") +  # Add forecasted values
labs(title = "Forecasted CO2 Concentrations Compared to Observed Values",
x = "Year", y = "CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y") +
guides(colour = guide_legend(title = "Series"))
# Generate forecasts from model.bic
forecast_arima <- model.bic %>%
forecast(new_data = future_data)  # Forecast horizon up to 2024
autoplot(forecast_arima, color = "blue2") +  # Add forecast first
autolayer(new_co2_tsib, value, color = "black") +  # Plot observed data on top
labs(title = "Forecasted CO2 Concentrations Compared to Observed Values",
x = "Year", y = "CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y") +
guides(colour = guide_legend(title = "Series"))
# getting root mean absolute error and root mean squared errors to compare models
# getting actual values
actual_values <- new_co2_tsib %>%
index_by(month = yearmonth(datetime)) %>%
summarise(value = mean(value, na.rm = T)) %>%
filter(month >= yearmonth('1998 Jan') & month <= yearmonth('2024 Sep')) %>%
pull(value)
# poly forecasted values
poly_forecast_values <- forecast_poly_season %>% pull(.mean)
#arima forecasted values
arima_forecast_values <- forecast_arima %>%
filter(index <= yearmonth('2024 Sep')) %>%
pull(.mean)
# Mean Absolute Error (MAE)
mae_poly <- mean(abs(actual_values - poly_forecast_values)) # ~ 12.3
mae_arima <- mean(abs(actual_values - arima_forecast_values)) # ~ 5.8
# Root Mean Squared Error (RMSE)
rmse_poly <- sqrt(mean((actual_values - poly_forecast_values)^2)) # ~ 15.3
rmse_arima <- sqrt(mean((actual_values - arima_forecast_values)^2)) # ~ 7.1
# Compare all four values
# mae_poly
# mae_arima
# rmse_poly
# rmse_arima
# statistically comparing performance using the Diebold-Mariano test
# Calculate forecast errors
errors_poly <- actual_values - poly_forecast_values
errors_arima <- actual_values - arima_forecast_values
# Perform Diebold-Mariano test
# dm.test(errors_poly, errors_arima, alternative = "two.sided", h = 1, power = 2)
# p-value less than .05, may reject the null hypothesis that the two errors are equal
new_co2_tsib <- new_co2_tsib %>%
fill_gaps()
# Impute using spline interpolation for the 18 missing values
new_co2_tsib_impute <- new_co2_tsib %>%
mutate(value = na_interpolation(value, option = "spline")) %>% # Using spline interpolation
select(datetime, value)
# Use decomposition
stl_model <- new_co2_tsib_impute %>%
model(STL(value ~ season(window = 52)))  # STL decomposition with seasonal component
# Extract the components (trend, season, remainder) from the STL model
stl_components <- components(stl_model)
# Plot the components to see how STL decomposed the data
stl_plot <- autoplot(stl_components) +
labs(title = "STL Decomposition of CO2 Data",
y = "CO2 concentrations (ppmv)")
stl_plot
# Convert datetime to yearweek format
stl_components <- stl_components %>%
mutate(datetime = yearweek(datetime), seasonally_adjusted_value = value - season_year)# Subtract the seasonal component
new_co2_tsib_impute <- new_co2_tsib_impute %>%
mutate(datetime = yearweek(datetime))
# Define training and test date ranges
train_end_date <- yearweek("2022-09-25")  # End of September 2022
test_start_date <- yearweek("2022-10-02")  # Start of October 2022
test_end_date <- yearweek("2024-09-29")    # End of September 2024
# Seasonally Adjusted (SA) training and test sets
# SA Training set
train_SA <- stl_components %>%
dplyr::select(datetime, seasonally_adjusted_value) %>%
filter(datetime <= train_end_date)
# SA Test set
test_SA <- stl_components %>%
dplyr::select(datetime, seasonally_adjusted_value) %>%
filter(datetime >= test_start_date & datetime <= test_end_date)
# Non-Seasonally Adjusted (NSA) training and test sets
# NSA Training set
train_NSA <- new_co2_tsib_impute %>%
dplyr::select(datetime, value) %>%
filter(datetime <= train_end_date)
# NSA Test set
test_NSA <- new_co2_tsib_impute %>%
dplyr::select(datetime, value) %>%
filter(datetime >= test_start_date & datetime <= test_end_date)
# Compute the ACF plot for NSA data
train_NSA_acf <- ACF(train_NSA, difference(difference(value,lag=1),lag=52), lag_max = 104) %>% autoplot()+
labs(title = "ACF plot of NSA Weekly CO2 Concentrations",subtitle = "Training Set, differenced 1st and 52nd", x = 'Lag', y = 'Autocorrelation')
# Compute the PACF plot for NSA data
train_NSA_pacf <- PACF(train_NSA, difference(difference(value,lag=1),lag=52), lag_max = 104) %>% autoplot()+
labs(title = "PACF plot of NSA Weekly CO2 Concentrations",subtitle = "Training Set, differenced 1st and 52nd",
x = 'Lag', y = 'Partial Autocorrelation')
# Compute the ACF plot for SA data
train_SA_acf <- ACF(train_SA, difference(difference(seasonally_adjusted_value,lag=1),lag=52), lag_max = 104) %>%
autoplot() +
labs(title = "ACF plot of SA Weekly CO2 Concentrations", subtitle = "Training Set, differenced 1st and 52nd",
x = 'Lag', y = 'Partial Autocorrelation')
# Compute the PACF plot for SA data
train_SA_pacf <- PACF(train_SA, difference(difference(seasonally_adjusted_value,lag=1),lag=52), lag_max = 104) %>%
autoplot() +
labs(title = "PACF plot of SA Weekly CO2 Concentrations", subtitle = "Training Set, differenced 1st and 52nd",
x = 'Lag', y = 'Partial Autocorrelation')
# Display the plots
(train_NSA_acf | train_NSA_pacf) / (train_SA_acf | train_SA_pacf)
# NSA
# Fit ARIMA model by testing different lags using the BIC criterion
model.bic.present.nsa <- train_NSA %>%
model(
auto = ARIMA(value, stepwise = FALSE, ic = "bic")
)
# Extract the glance
nsa.auto.report <- model.bic.present.nsa %>%
dplyr::select(auto) %>%
glance()
# Look at report for auto
# model.bic.present.nsa %>%
#   select(auto) %>%
#   report()
#SA
# Fit ARIMA model by testing different lags using the BIC criterion
model.bic.present.sa <- train_SA %>%
model(
#arima = ARIMA(seasonally_adjusted_value ~ 0 + pdq(0,1,4)))
auto = ARIMA(seasonally_adjusted_value, stepwise = FALSE, ic = "bic"))
# Look at report for auto
# model.bic.present.sa %>%
#   select(auto) %>%
#   report()
# Extract the report from the best ARIMA model
sa.auto.report <- model.bic.present.sa %>%
select(auto)%>%
glance()
# NSA: Create a data frame for NSA models
nsa_table <- data.frame(
Model = c("Auto: ARIMA(0,1,3)(2,1,0)[52]"),
AICc = c(nsa.auto.report$AICc),
BIC = c(nsa.auto.report$BIC),
LogLik = c(nsa.auto.report$log_lik)
)
# SA: Create a data frame for SA model
sa_table <- data.frame(
Model = c("Auto: ARIMA(4,1,1)"),
AICc = c(sa.auto.report$AICc),
BIC = c(sa.auto.report$BIC),
LogLik = c(sa.auto.report$log_lik)
)
kable(nsa_table, caption = "NSA ARIMA Model Results")%>%
kable_styling(font_size = 9,latex_options = "HOLD_position")
kable(sa_table, caption = "SA ARIMA Model Results")%>%
kable_styling(font_size = 9,latex_options = "HOLD_position")
# Extract residuals from the ARIMA model
residuals_arima.nsa <- model.bic.present.nsa %>%
dplyr::select(auto) %>%
residuals()
residuals_arima.nsa <- residuals_arima.nsa %>%
mutate(datetime = as.Date(datetime))
# Plot the residuals over time
residual_plot.nsa <- autoplot(residuals_arima.nsa) +
labs(title = "Residuals of ARIMA(0,1,3)(2,1,0)[52] ", x = "Year", y = "Residuals")
# Plot the ACF of the residuals
acf_plot.nsa <- ggAcf(residuals_arima.nsa) +
labs(title = "ACF of ARIMA(0,1,3)(2,1,0)[52]  Residuals", x = "Lag", y = "ACF")
# Q-Q plot to check normality of residuals
qq_plot.nsa <- ggplot(data = as.data.frame(residuals_arima.nsa), aes(sample = .resid)) +
stat_qq() +
stat_qq_line() +
labs(title = "Q-Q Plot of ARIMA(0,1,3)(2,1,0)[52]  Residuals", x = "Theoretical Quantiles", y = "Sample Quantiles")
residual_plot.nsa|acf_plot.nsa |qq_plot.nsa
# Ljung Box Test on residuals
resid.ts.nsa <- residuals_arima.nsa %>%
dplyr::select(.resid) %>%
pull(.resid)  # Convert to a numeric vector
# Convert the residuals into a time series object
resid.ts.nsa <- ts(resid.ts.nsa)
# Perform the Ljung-Box test on the residuals
# Box.test(resid.ts.nsa, lag = 52, type = "Ljung-Box")
# Extract residuals from the ARIMA model
residuals_arima.sa <- model.bic.present.sa %>%
dplyr::select(auto) %>%
residuals()
residuals_arima.sa <- residuals_arima.sa %>%
mutate(datetime = as.Date(datetime))
# Plot the residuals over time
residual_plot.sa <- autoplot(residuals_arima.sa) +
labs(title = "Residuals of ARIMA(4,1,1)", x = "Year", y = "Residuals")
# Plot the ACF of the residuals
acf_plot.sa <- ggAcf(residuals_arima.sa) +
labs(title = "ACF of ARIMA(4,1,1) Residuals", x = "Lag", y = "ACF")
# Q-Q plot to check normality of residuals
qq_plot.sa <- ggplot(data = as.data.frame(residuals_arima.sa), aes(sample = .resid)) +
stat_qq() +
stat_qq_line() +
labs(title = "Q-Q Plot of ARIMA(4,1,1) Residuals", x = "Theoretical Quantiles", y = "Sample Quantiles")
residual_plot.sa|acf_plot.sa |qq_plot.sa
# Ljung Box Test on residuals
resid.ts.sa <- residuals_arima.sa %>%
dplyr::select(.resid) %>%
pull(.resid)  # Convert to a numeric vector
# Convert the residuals into a time series object
resid.ts.sa <- ts(resid.ts.sa)
# Perform the Ljung-Box test on the residuals
#Box.test(resid.ts.sa, lag = 52, type = "Ljung-Box")
# Extract fitted values for the NSA ARIMA model
nsa_fitted <- model.bic.present.nsa %>%
dplyr::select(auto) %>%
fitted()
# Generate forecasts for the NSA ARIMA model
nsa_forecast <- model.bic.present.nsa %>%
dplyr::select(auto) %>%
forecast(new_data = test_NSA)
# Plot the fitted values for training, forecast for test data, and actual data
nsa_forecast_plot<-autoplot(nsa_fitted,.fitted, color = "blue2") +  # Fitted values for training data
autolayer(train_NSA, value, color = "black") +  # Actual values for training data
autolayer(nsa_forecast, color = "blue2") +  # Forecast for test data
autolayer(test_NSA, value, color = "black") +  # Actual values for test data
labs(title = "NSA: Assessing ARIMA(0,1,3)(2,1,0)[52]\nForecasted Values On Test Set", x = "Year", y = "CO2 concentrations (ppmv)") +
coord_cartesian(xlim = c(as.Date("2020-01-01"), NA), ylim=c(375,450)) # Limit to data from 2020 onwards
nsa_full_plot<-autoplot(nsa_fitted,.fitted, color = "blue2") +  # Fitted values for training data
autolayer(train_NSA, value, color = "black",alpha = 0.8) +  # Actual values for training data
autolayer(nsa_forecast, color = "blue2") +  # Forecast for test data
autolayer(test_NSA, value, color = "black") +  # Actual values for test data
labs(title = "NSA: Comparing ARIMA(0,1,3)(2,1,0)[52]\nFit on Training Data", x = "Year", y = "CO2 concentrations (ppmv)")
# Extract fitted values for the SA ARIMA model
sa_fitted <- model.bic.present.sa %>%
dplyr::select(auto) %>%
fitted()
# Generate forecasts for the SA ARIMA model
sa_forecast <- model.bic.present.sa %>%
dplyr::select(auto) %>%
forecast(new_data = test_SA)
# Plot the fitted values for training, forecast for test data, and actual data
sa_forecast_plot<-autoplot(sa_fitted,.fitted,color = "blue2") +  # Fitted values for training data
autolayer(train_SA, seasonally_adjusted_value, color = "black") +  # Actual values for training data
autolayer(sa_forecast,color = "blue2") +  # Forecast for test data
autolayer(test_SA, seasonally_adjusted_value, color = "black") +  # Actual values for test data
labs(title = "SA: Assessing ARIMA(4,1,1)\nForecasted Values On Test Set", x = "Year", y = "CO2 concentrations (ppmv)") +
coord_cartesian(xlim = c(as.Date("2020-01-01"), NA), ylim=c(375,450))  # Limit to data from 2020 onwards
# Plot the fitted values for training, forecast for test data, and actual data
sa_full_plot<-autoplot(sa_fitted,.fitted,color = "blue2") +  # Fitted values for training data
autolayer(train_SA, seasonally_adjusted_value, color = "black", alpha = 0.8) +  # Actual values for training data
autolayer(sa_forecast,color = "blue2") +  # Forecast for test data
autolayer(test_SA, seasonally_adjusted_value, color = "black") +  # Actual values for test data
labs(title = "SA: Comparing ARIMA(4,1,1)\nFit on Training Data", x = "Year", y = "CO2 concentrations (ppmv)")
(sa_full_plot | nsa_full_plot)/
(sa_forecast_plot| nsa_forecast_plot)
# NSA: Calculate MSE and MAE for training set (fitted values)
nsa_train_errors <- nsa_fitted %>%
left_join(train_NSA, by = "datetime") %>%
mutate(
se = (value - .fitted)^2,
ae = abs(value - .fitted)
)
nsa_rmse_train <- sqrt(mean(nsa_train_errors$se))
nsa_mae_train <- mean(nsa_train_errors$ae)
# SA: Calculate MSE and MAE for training set (fitted values)
sa_train_errors <- sa_fitted %>%
left_join(train_SA, by = "datetime") %>%
mutate(
se = (seasonally_adjusted_value - .fitted)^2,
ae = abs(seasonally_adjusted_value - .fitted)
)
sa_rmse_train <- sqrt(mean(sa_train_errors$se))
sa_mae_train <- mean(sa_train_errors$ae)
# NSA: Calculate MSE and MAE for test set (forecasted values)
nsa_test_errors <- nsa_forecast %>%
left_join(test_NSA, by = "datetime") %>%
mutate(
se = (value.y - .mean)^2,
ae = abs(value.y - .mean)
)
nsa_rmse_test <- sqrt(mean(nsa_test_errors$se))
nsa_mae_test <- mean(nsa_test_errors$ae)
# SA: Calculate MSE and MAE for test set (forecasted values)
sa_test_errors <- sa_forecast %>%
left_join(test_SA, by = "datetime") %>%
mutate(
se = (seasonally_adjusted_value.y - .mean)^2,
ae = abs(seasonally_adjusted_value.y - .mean)
)
sa_rmse_test <- sqrt(mean(sa_test_errors$se))
sa_mae_test<- mean(sa_test_errors$ae)
# Create a data frame to store the RMSE and MAE results
model_comparison <- data.frame(
Metric = c("RMSE (Training)", "MAE (Training)", "RMSE (Test)", "MAE (Test)"),
`NSA ARIMA Model` = c(nsa_rmse_train, nsa_mae_train, nsa_rmse_test, nsa_mae_test),
`SA ARIMA Model` = c(sa_rmse_train, sa_mae_train, sa_rmse_test, sa_mae_test)
)
# Use kable to display the comparison table
kable(model_comparison, caption = "Comparison of NSA and SA Models on Training and Test Sets")%>%
kable_styling(font_size = 9,latex_options = "HOLD_position")
SA_poly_model <- train_SA %>%
model(
poly_model = TSLM(seasonally_adjusted_value ~ poly(datetime, 3,raw = TRUE))     # Cubic polynomial time trend model
)
fitted_SA_poly<- SA_poly_model %>%
dplyr::select(poly_model) %>%
fitted()
forecast_SA_poly <- SA_poly_model %>%
dplyr::select(poly_model) %>%
forecast(new_data = test_SA)  # Use a forecast horizon from the last observed point
SA_poly_full_plot <- autoplot(train_SA, seasonally_adjusted_value) +  # Plot original data  # Plot original data
autolayer(fitted_SA_poly, .fitted, color = "blue2")+
autolayer(forecast_SA_poly, color = "blue2") +  # Add forecasted values
autolayer(test_SA, seasonally_adjusted_value)+
labs(title = "Polynomial (3) Model Fit on SA Training Set",
x = "Year", y = "CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y") +
guides(colour = guide_legend(title = "Series"))
SA_poly_forecast_plot <- autoplot(train_SA, seasonally_adjusted_value) +  # Plot original data  # Plot original data
autolayer(fitted_SA_poly, .fitted, color = "blue2")+
autolayer(forecast_SA_poly, color = "blue2") +  # Add forecasted values
autolayer(test_SA, seasonally_adjusted_value)+
labs(title = "Assessing Polynomial (3) Model on SA Test Set",
x = "Year", y = "CO2 concentrations (ppmv)") +
scale_x_yearmonth(date_breaks = "5 years", date_labels = "%Y") +
coord_cartesian(xlim = c(as.Date("2020-01-01"), NA), ylim=c(375,450)) # Limit to data from 2020 onwards
SA_poly_full_plot | SA_poly_forecast_plot
# Calculate RMSE and MAE for poly (3) model
sa_poly_train_errors <- train_SA %>%
left_join(fitted_SA_poly, by = "datetime") %>%
mutate(
se = (seasonally_adjusted_value - .fitted)^2,
ae = abs(seasonally_adjusted_value - .fitted)
)
sa_poly_test_errors <- test_SA %>%
left_join(forecast_SA_poly, by = "datetime") %>%
mutate(
se = (seasonally_adjusted_value.x - .mean)^2,
ae = abs(seasonally_adjusted_value.x - .mean)
)
sa_poly_rmse_train <- sqrt(mean(sa_poly_train_errors$se))
sa__poly_mae_train<- mean(sa_poly_train_errors$ae)
sa_poly_rmse_test <- sqrt(mean(sa_poly_test_errors$se))
sa__poly_mae_test<- mean(sa_poly_test_errors$ae)
# Look at the values
# sa_poly_rmse_train
# sa__poly_mae_train
# sa_poly_rmse_test
# sa__poly_mae_test
# Generate forecasts for the NSA ARIMA model
nsa_forecast <- model.bic.present.nsa %>%
dplyr::select(auto) %>%
forecast(h = "101 years") # up to 2122
# Convert the forecast to a data frame for easier inspection
forecast_df <- as.data.frame(nsa_forecast) %>%
mutate(monthyear = yearmonth(datetime))
# Look at when CO2 levels are predicted to reach 420 ppm
threshold_420 <- forecast_df %>%
filter(.mean >= 420 & .mean < 421)
# Extract the mean and variance from threshold_420
mean_420 <- threshold_420$.mean  # Mean value
variance_420 <- variance(threshold_420$value)  # Extract variance from the distribution
# Calculate standard deviation
sd_420 <- sqrt(variance_420)
# Calculate the 80% confidence interval
ci_lower_420 <- mean_420 - 1.28 * sd_420
ci_upper_420 <- mean_420 + 1.28 * sd_420
# Look at when CO2 levels are predicted to reach 500 ppm
threshold_500 <- forecast_df %>%
filter(.mean >= 500 & .mean < 501)
# Extract the mean and variance from threshold_420
mean_500 <- threshold_500$.mean  # Mean value
variance_500 <- variance(threshold_500$value)  # Extract variance from the distribution
# Calculate standard deviation
sd_500 <- sqrt(variance_500)
# Calculate the 80% confidence interval
ci_lower_500 <- mean_500 - 1.28 * sd_500
ci_upper_500 <- mean_500 + 1.28 * sd_500
# Define a function to get the closest value
get_closest <- function(target, values) {
values[which.min(abs(values - target))]
}
# get first and last values
last_420 <- c(ci_lower_420[length(ci_lower_420)], ci_upper_420[length(ci_upper_420)])
last_500 <- c(ci_lower_500[length(ci_lower_500)], ci_upper_500[length(ci_upper_500)])
# Find the closest .mean values in forecast_df to each target in last_420
closest_420 <- sapply(last_420, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 420 ppm
matching_dates_420 <- forecast_df %>%
filter(.mean %in% closest_420) %>%
dplyr::select(monthyear, .mean)
# Find the closest .mean values in forecast_df to each target in last_500
closest_500 <- sapply(last_500, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 500 ppm
matching_dates_500 <- forecast_df %>%
filter(.mean %in% closest_500) %>%
dplyr::select(monthyear, .mean)
# # Display the results
matching_dates_420
matching_dates_500
# Looking at confidence intervals for first and last time 420 and 500 level is reached
c(ci_lower_420[1],  ci_upper_420[1])
c(ci_lower_500[1],  ci_upper_500[1])
View(threshold_420)
View(threshold_420)
# Create a data frame with blanks
co2_table <- data.frame(
`CO2 Level` = c("420 ppm", "500 ppm"),  # CO2 levels to track
`First Month` = c("2022 Nov", "2043 Jun"),
`First Value` = c("419.01", "468.6"),
`Last Month` = c("2024 Jul", "2068 Dec"),
`Last Value` = c("422.7", "532.9")
)
# Print the table using kable
kable(co2_table, caption = "CO2 Levels and Forecasted Times ARIMA NSA with 80% Confidence Intervals")%>%
kable_styling(font_size =9,latex_options = "HOLD_position")  # Adjust the font size here (change to any desired value)
# Define a function to get the closest value
get_closest <- function(target, values) {
values[which.min(abs(values - target))]
}
# get first and last values
last_420 <- c(ci_lower_420[length(ci_lower_420)], ci_upper_420[length(ci_upper_420)])
last_500 <- c(ci_lower_500[length(ci_lower_500)], ci_upper_500[length(ci_upper_500)])
# Find the closest .mean values in forecast_df to each target in last_420
closest_420 <- sapply(last_420, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 420 ppm
matching_dates_420 <- data.frame(
`MonthYear` = c(threshold_420$monthyear[1], threshold_420$monthyear[-1]),
`CO2 Level (ppm)` = c(threshold_420$.mean[1], threshold_420$.mean[1])
)
# Find the closest .mean values in forecast_df to each target in last_500
closest_500 <- sapply(last_500, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 500 ppm
matching_dates_500 <- data.frame(
`MonthYear` = c(threshold_500$monthyear[1], threshold_500$monthyear[-1]),
`CO2 Level (ppm)` = c(threshold_500$.mean[1], threshold_500$.mean[1])
)
# # Display the results
matching_dates_420
matching_dates_500
# Looking at confidence intervals for first and last time 420 and 500 level is reached
c(ci_lower_420[1],  ci_upper_420[1])
c(ci_lower_500[1],  ci_upper_500[1])
# Define a function to get the closest value
get_closest <- function(target, values) {
values[which.min(abs(values - target))]
}
# get first and last values
last_420 <- c(ci_lower_420[length(ci_lower_420)], ci_upper_420[length(ci_upper_420)])
last_500 <- c(ci_lower_500[length(ci_lower_500)], ci_upper_500[length(ci_upper_500)])
# Find the closest .mean values in forecast_df to each target in last_420
closest_420 <- sapply(last_420, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 420 ppm
matching_dates_420 <- data.frame(
`MonthYear` = c(threshold_420$monthyear[1], threshold_420$monthyear[nrow(threshold_420)]),
`CO2_Level_ppm` = c(threshold_420$.mean[1], threshold_420$.mean[nrow(threshold_420)])
)
# Find the closest .mean values in forecast_df to each target in last_500
closest_500 <- sapply(last_500, get_closest, values = forecast_df$.mean)
# Filter forecast_df for the closest .mean values for 500 ppm
matching_dates_500 <- data.frame(
`MonthYear` = c(threshold_500$monthyear[1], threshold_500$monthyear[nrow(threshold_500)]),
`CO2 Level (ppm)` = c(threshold_500$.mean[1], threshold_500$.mean[nrow(threshold_500)])
)
# # Display the results
matching_dates_420
matching_dates_500
# Looking at confidence intervals for first and last time 420 and 500 level is reached
c(ci_lower_420[1],  ci_upper_420[1])
c(ci_lower_500[1],  ci_upper_500[1])
# Create a data frame with blanks
co2_table <- data.frame(
`CO2 Level` = c("420 ppm", "500 ppm"),  # CO2 levels to track
`First Month` = c("2022 Dec", "2043 Jun"),
`First Value` = c("420.0", "500.4"),
`Last Month` = c("2024 Sep", "2068 Dec"),
`Last Value` = c("420.8", "500.8")
)
# Print the table using kable
kable(co2_table, caption = "CO2 Levels and Forecasted Times ARIMA NSA with 80% Confidence Intervals")%>%
kable_styling(font_size =9,latex_options = "HOLD_position")  # Adjust the font size here (change to any desired value)
# Create a data frame with blanks
co2_table <- data.frame(
`CO2 Level` = c("420 ppm", "500 ppm"),  # CO2 levels to track
`First Month` = c("2022 Dec", "2056 Feb"),
`First Value` = c("420.0", "500.4"),
`Last Month` = c("2024 Sep", "2058 Aug"),
`Last Value` = c("420.8", "500.8")
)
# Print the table using kable
kable(co2_table, caption = "CO2 Levels and Forecasted Times ARIMA NSA with 80% Confidence Intervals")%>%
kable_styling(font_size =9,latex_options = "HOLD_position")  # Adjust the font size here (change to any desired value)
